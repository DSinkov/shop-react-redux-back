service: import-service
useDotenv: true
variablesResolutionMode: 20210326

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  profile: default
  region: eu-west-1
  lambdaHashingVersion: 20201221

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource:
        - "arn:aws:s3:::rss-task-5"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::rss-task-5/*"
    - Effect: "Allow"
      Action:
        - "sqs:*"
      Resource:
        - Fn::GetAtt: [catalogItemsQueue, Arn]
    - Effect: "Allow"
      Action:
        - "sns:*"
      Resource:
        Ref: createProductTopic

  environment:
    PGUSER: ${env:PGUSER}
    PGHOST: ${env:PGHOST}
    PGPASSWORD: ${env:PGPASSWORD}
    PGDATABASE: ${env:PGDATABASE}
    PGPORT: ${env:PGPORT}
    SQS_URL:
      Ref: catalogItemsQueue
    SNS_ARN:
      Ref: createProductTopic

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: rs-task-6-sqs
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: rs-task-6-topic
    createProductSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ellipsoid8@gmail.com
        Protocol: email
        TopicArn:
          Ref: createProductTopic

functions:
  importProductsFile:
    handler: handler.importProductsFile
    events:
      - http:
          method: "get"
          path: "import"
          request:
            parameters:
              querystrings:
                name: true
  importFileParser:
    handler: handler.importFileParser
    events:
      - s3:
          bucket: rss-task-5
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true

  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn

